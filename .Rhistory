filter(Rank < topN) %>%
pull(Symbol)
## Get the rows corresponding to ids_of_interest and all columns
gene_matrix <- exprs(gse)[ids_of_interest,]
pheatmap(gene_matrix,
labels_row = gene_names)
#It is often preferable to scale each row to highlight the differences in each gene across the dataset.
pheatmap(gene_matrix,
labels_row = gene_names,
scale="row")
my_genes <- c("SLC22A1","SLC22A2","SLC22A4", "SLC22A5")
ids_of_interest <-  filter(full_results,Symbol %in% my_genes) %>%
pull(ID)
gene_names <-  filter(full_results,Symbol %in% my_genes) %>%
pull(Symbol)
gene_matrix <- exprs(gse)[ids_of_interest,]
pheatmap(gene_matrix,
labels_row = gene_names,
scale="row")
#Inspect the clinical variables
sampleInfo <- pData(gse)
sampleInfo
## source_name_ch1 and characteristics_ch1.1 seem to contain factors we might need for the analysis. Let's pick just those columns
sampleInfo <- select(sampleInfo, source_name_ch1,characteristics_ch1.1)
## Optionally, rename to more convenient column names
sampleInfo <- rename(sampleInfo,disease = source_name_ch1, patient=characteristics_ch1.1)
sampleInfo
#linear model
library(limma)
gse$characteristics_ch1.1 [gse$characteristics_ch1.1 == "NA"] <- NA
design <- model.matrix(~0+sampleInfo$group)
design <- model.matrix(~0+sampleInfo$disease)
design
head(design)
## the column names are a bit ugly, so we will rename
colnames(design) <- c("Adjacent","Adenocarcinoma")
summary(exprs(gse))
fit <- lmFit(eset,design)
fit
#calculate the t-statistics
fit <- eBayes(fit)
summary(fit)
#summarise results
#Test for differential expression between 2 groups
results <- decideTests(fit[,"diseaseLung adenocarcinoma"])
fit <- lmFit(eset,design)
fit
#summarise results
#Test for differential expression between 2 groups
results <- decideTests(fit[,"diseaseLung adenocarcinoma"])
#summarise results
#Test for differential expression between 2 groups
results <- decideTests(fit[,"Adenocarcinoma"])
str(results)
design <- model.matrix(~0+sampleInfo$disease)
design
colSums(design)
## the column names are a bit ugly, so we will rename
colnames(design) <- c("Adjacent","Adenocarcinoma")
summary(exprs(gse))
fit <- lmFit(eset,design)
fit
#calculate the t-statistics
fit <- eBayes(fit)
summary(fit)
#summarise results
#Test for differential expression between 2 groups
results <- decideTests(fit[,"Adjacent"])
str(results)
fit <- lmFit(exprs(gse),design)
fit
#define the contrast that we are interested i
contrasts <- makeContrasts(Adenocarcinoma - Adjacent, levels=design)
contrasts
#define the contrast that we are interested i
contrasts <- makeContrasts(status=Adenocarcinoma - Adjacent, levels=design)
contrasts
head(fit$coefficients)
#define the contrast that we are interested in
fit2 <- contrasts.fit(fit, contrasts=contrasts)
head(fit2$coefficients,3)
#calculate the t-statistics
fit2 <- eBayes(fit2)
#summarise results
#Test for differential expression between 2 groups
results <- decideTests(fit2)
str(results)
summary(results)
#summarise results
#Test for differential expression between 2 groups
results <- decideTests(fit2)
summary(results)
#load library
library(GEOquery)
library(Biobase)
library(dplyr)
library(ggplot2)
##load series and platform data from GEO
#change my_id to the dataset that you want
my_id <- "GSE75037"
gse <- getGEO(my_id)
## check how many platforms used
length(gse)
#extract data
gse <- gse[[1]]
gse
p <- pData(gse) ## print the sample information/ phenotype data
f <- fData(gse) ## print the gene annotation/ feature data
x <- exprs(gse) ## print the expression matrix
# Create a boxplot of the first gene in the expression matrix
boxplot(x[1,] ~ p[,"source_name_ch1"], main = f[1,"symbol"])
#load libraries
library(GEOquery)
library(Biobase)
library(dplyr)
##load series and platform data from GEO
#change my_id to the dataset that you want
my_id <- "GSE75037"
gse <- getGEO(my_id)
## check how many platforms used
length(gse)
#extract data
gse <- gse[[1]]
gse
#check the dimension
#view number of features(genes/rows) and samples(columns)
dim(gse)
#print information
p <- pData(gse) ## print the sample information
f <-fData(gse) ## print the gene annotation
x <- exprs(gse) ## print the expression data
### CHECK NORMALISATION ####
#inspect the data to discover what scale the data are presented in.
#exprs function can retrieve the expression values as a data frame;
#with one column per-sample and one row per-gene.
#summary function can then be used to print the distributions
summary(exprs(gse))
#A boxplot can also be generated to see if the data have been normalised
#If so, the distributions of each sample should be highly similar.
boxplot(exprs(gse),outline=FALSE)
#visualize the distribution of gene expression levels for each sample
plotDensities(gse,legend=FALSE)
library(limma)
#visualize the distribution of gene expression levels for each sample
plotDensities(gse,legend=FALSE)
#information about the processing protocol can be extracted by the pData function.
#For your own data, you will have to decide which columns will be useful in
#the analysis. The column giving the main comparison(s)
#of interest and any potential confounding factors.
sampleInfo <- p
head(sampleInfo)
##Let's pick just those columns that we might need for the analysis
sampleInfo <- select(sampleInfo, 44,characteristics_ch1.1)
## Optionally, rename to more convenient column names
sampleInfo <- rename(sampleInfo,group = 1, patient=characteristics_ch1.1)
sampleInfo
### PRINCIPAL COOMPONENTS ANALYSIS ####
#Plot principal components labeled by group
plotMDS(gse, labels=sampleInfo[,"group"],
gene.selection="common")
library(pheatmap)
corMatrix <- cor(exprs(gse),use="c")
pheatmap(corMatrix)
#Incorporate sample information onto the plot to try and understand the clustering
## Print the rownames of the sample information and check it matches the correlation matrix
rownames(sampleInfo)
colnames(corMatrix)
pheatmap(corMatrix,
annotation_col=sampleInfo)
#### SAVE CSV ####
### Look at the features data frame and decide the names of the columns you want to keep
#We can export the expression data to a csv for inspection in Excel
library(readr)
features <- select(f,Symbol,Entrez_Gene_ID,RefSeq_ID,Chromosome,Cytoband)
full_output <- cbind(features,x)
write_csv(full_output, path="gse_full_output.csv")
#### DIFFERENTIAL EXPRESSION ANALYSIS #####
library(limma)
design <- model.matrix(~0+sampleInfo$group)
design
#rename
colnames(design) <- c("adenocarcinoma","non_malignant")
# Count the number of samples modeled by each coefficient
colSums(design)
#In order to perform the differential analysis, we have to define the
#contrast that we are interested in. In our case we only have two groups
#and one contrast of interest.
contrasts <- makeContrasts(adenocarcinoma - non_malignant, levels=design)
contrasts
#fit the model
fit <- lmFit(exprs(gse), design)
head(fit$coefficients)
# Fit the contrasts
fit2 <- contrasts.fit(fit,contrasts = contrasts)
#calculate the t-statistics for the contrasts
#apply the empirical Bayes’ step to get our differential
#expression statistics and p-values
efit <- eBayes(fit2)
#### ADD GENES ID ####
anno <- f
anno
anno <- select(anno,Symbol,Entrez_Gene_ID,Chromosome,Cytoband)
efit$genes <- anno
topTable(efit)
#visualise
plotSA(efit, main="Final model: Mean-variance trend")
# Summarize results
#quick look at differential expression levels
topTable(efit)
#If we want to know how many genes are differentially-expressed overall
results <- (decideTests(efit))
summary(results)
# Plot a histogram of the p-values
stats <- topTable(efit, number = nrow(efit), sort.by = "none")
hist(stats[, "P.Value"],col = "grey50", border = "white"))
hist(stats[, "P.Value"],col = "grey50", border = "white")
#Some studies require more than an adjusted p-value cut-off
#For a stricter definition on significance, one may require
#log-fold-changes (log-FCs) to be above a minimum value.
tfit <- treat(efit, lfc=1)
dt <- decideTests(tfit)
summary(dt)
adeno_vs_non <- topTreat(tfit, coef=1, n=Inf)
head(adeno_vs_non)
plotMD(tfit, column=1, status=dt[,1], main=colnames(tfit)[1],
xlim=c(2,16))
##### GLIMMA ########3
#BiocManager::install("Glimma")
library(Glimma)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="ENTREZ_GENE_ID", launch=TRUE)
heatmap(tfit, scale="row", abCol=group)
gene_matrix <- exprs(gse)[ids_of_interest,]
ids_of_interest <-  filter(full_results,Symbol %in% genes) %>%
pull(ID)
gene_matrix <- exprs(gse)[ids_of_interest,]
#calculate the t-statistics for the contrasts
#apply the empirical Bayes’ step to get our differential
#expression statistics and p-values
efit <- eBayes(fit2)
View(efit)
View(tfit)
plotMD(dt, column=1, status=dt[,1], main=colnames(tfit)[1],
xlim=c(2,16))
plotMD(tfit, column=1, status=dt[,1], main=colnames(tfit)[1],
xlim=c(2,16))
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="ENTREZ_GENE_ID", launch=TRUE)
#calculate the t-statistics for the contrasts
#apply the empirical Bayes’ step to get our differential
#expression statistics and p-values
efit <- eBayes(fit2)
View(efit)
#### ADD GENES ID ####
anno <- f
anno
anno <- select(anno,Symbol,Entrez_Gene_ID,Chromosome,Cytoband)
efit$genes <- anno
View(efit)
topTable(efit)
View(contrasts)
View(f)
#### ADD GENES ID ####
anno <- f
anno
anno <- select(anno,Symbol,ID, Entrez_Gene_ID,Chromosome,Cytoband)
efit$genes <- anno
topTable(efit)
anno <- select(anno,Symbol, Entrez_Gene_ID,Chromosome,Cytoband)
efit$genes <- anno
topTable(efit)
#### ADD GENES ID ####
anno <- f
anno
group=as.factor(sampleInfo$group)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="ENTREZ_GENE_ID", counts=fit, groups=group, launch=TRUE)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="ENTREZ_GENE_ID", counts=efit, groups=group, launch=TRUE)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="ENTREZ_GENE_ID", counts=efit, groups=sampleInfo$group, launch=TRUE)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="ENTREZ_GENE_ID", counts=efit,launch=TRUE)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="ENTREZ_GENE_ID", groups=group, launch=TRUE)
#### ADD GENES ID ####
anno <- f
anno
anno <- select(anno,Entrez_Gene_ID,Symbol,Chromosome,Cytoband)
efit$genes <- anno
topTable(efit)
#visualise
plotSA(efit, main="Final model: Mean-variance trend")
# Summarize results
#quick look at differential expression levels
topTable(efit)
#If we want to know how many genes are differentially-expressed overall
results <- (decideTests(efit))
summary(results)
# Plot a histogram of the p-values
stats <- topTable(efit, number = nrow(efit), sort.by = "none")
hist(stats[, "P.Value"],col = "grey50", border = "white")
#Some studies require more than an adjusted p-value cut-off
#For a stricter definition on significance, one may require
#log-fold-changes (log-FCs) to be above a minimum value.
tfit <- treat(efit, lfc=1)
dt <- decideTests(tfit)
summary(dt)
adeno_vs_non <- topTreat(tfit, coef=1, n=Inf)
head(adeno_vs_non)
plotMD(tfit, column=1, status=dt[,1], main=colnames(tfit)[1],
xlim=c(2,16))
group=as.factor(sampleInfo$group)
##### GLIMMA ########3
#BiocManager::install("Glimma")
library(Glimma)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="ENTREZ_GENE_ID", groups=group, launch=TRUE)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="ENTREZ_GENE_ID", counts=x, groups=group, launch=TRUE)
cpm <- cpm(x)
library(edgeR)
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="ENTREZ_GENE_ID", counts=lcpm, groups=group, launch=TRUE)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="ENTREZ_GENE_ID", counts=lcpm, groups=group, launch=TRUE)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="Entrez_Gene_ID", counts=lcpm, groups=group, launch=TRUE)
anno <- select(anno,Symbol, Entrez_Gene_ID,Chromosome,Cytoband)
efit$genes <- anno
topTable(efit)
#visualise
plotSA(efit, main="Final model: Mean-variance trend")
# Summarize results
#quick look at differential expression levels
topTable(efit)
#If we want to know how many genes are differentially-expressed overall
results <- (decideTests(efit))
summary(results)
# Plot a histogram of the p-values
stats <- topTable(efit, number = nrow(efit), sort.by = "none")
hist(stats[, "P.Value"],col = "grey50", border = "white")
#Some studies require more than an adjusted p-value cut-off
#For a stricter definition on significance, one may require
#log-fold-changes (log-FCs) to be above a minimum value.
tfit <- treat(efit, lfc=1)
dt <- decideTests(tfit)
summary(dt)
adeno_vs_non <- topTreat(tfit, coef=1, n=Inf)
head(adeno_vs_non)
plotMD(tfit, column=1, status=dt[,1], main=colnames(tfit)[1],
xlim=c(2,16))
group=as.factor(sampleInfo$group)
##### GLIMMA ########3
#BiocManager::install("Glimma")
library(Glimma)
library(edgeR)
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="Entrez_Gene_ID", counts=lcpm, groups=group, launch=TRUE)
heatmap(tfit, scale="row", abCol=group)
i <- which(x$genes$ENTREZID %in% adeno_vs_non)
i <- which(tfit$genes$ENTREZID %in% adeno_vs_non)
mycol <- colorpanel(1000,"blue","white","red")
library(gplots)
install.packages(gplots)
install.packages("gplots")
View(x)
View(tfit)
i <- which(tfit$genes$Entrez_Gene_ID %in% adeno_vs_non)
library(gplots)
mycol <- colorpanel(1000,"blue","white","red")
heatmap.2(lcpm[i,], scale="row",
labRow=tfit$genes$Symbol[i], labCol=group,
col=mycol, trace="none", density.info="none",
margin=c(8,6), lhei=c(2,10), dendrogram="column")
i <- which(x$genes$Entrez_Gene_ID %in% adeno_vs_non)
heatmap.2(x$E[i,], scale="row",
labRow=tfit$genes$Symbol[i], labCol=group,
col=mycol, trace="none", density.info="none",
margin=c(8,6), lhei=c(2,10), dendrogram="column")
heatmap.2(gse$E[i,], scale="row",
labRow=tfit$genes$Symbol[i], labCol=group,
col=mycol, trace="none", density.info="none",
margin=c(8,6), lhei=c(2,10), dendrogram="column")
# Find the row which contains Top2b expression data
SLC <- which(f[, "Symbol"] == "SLC")
# Plot Top2b expression versus genotype
boxplot(x[Adenocarcinoma, ] ~ pData(eset)[, "genotype"],
main = f[Adenocarcinoma, ])
View(x)
View(gse)
gse@assayData[["exprs"]]
View(p)
View(p)
#visualize the distribution of gene expression levels for each sample
plotDensities(gse, group=p[,"source_name_ch1"], legend=FALSE)
#visualize the distribution of gene expression levels for each sample
plotDensities(gse, group=pData(gse)[,"source_name_ch1"], legend=FALSE)
#visualize the distribution of gene expression levels for each sample
plotDensities(gse, group=pData(gse)[[,"source_name_ch1"]], legend=FALSE)
#visualize the distribution of gene expression levels for each sample
plotDensities(gse, group=pData(gse)["genotype"], legend=FALSE)
#visualize the distribution of gene expression levels for each sample
plotDensities(gse, group=pData(gse)[,"genotype"], legend=FALSE)
#visualize the distribution of gene expression levels for each sample
plotDensities(gse, group=p[,"source_name_ch1"], legend=FALSE)
#visualize the distribution of gene expression levels for each sample
plotDensities(gse, group=p(,"source_name_ch1"), legend=FALSE)
#visualize the distribution of gene expression levels for each sample
plotDensities(gse, group=p$source_name_ch1, legend=FALSE)
#visualize the distribution of gene expression levels for each sample
plotDensities(gse, legend=FALSE)
#visualize the distribution of gene expression levels for each sample
plotDensities(gse, group = pData(eset)[,"source_name_ch1"], legend = "topright")
#visualize the distribution of gene expression levels for each sample
plotDensities(gse, group = pData(gse)[,"source_name_ch1"], legend = "topright")
# Plot Top2b expression versus genotype
boxplot(exprs(gse)[SLC, ] ~ pData(gse)[, "source_name_ch1"],
main = f[SLC, ])
# Find the row which contains Top2b expression data
SLC <- which(fData(gse)[, "Symbol"] == "SLC")
# Find the row which contains Top2b expression data
SLC <- which(fData(gse)[, "Symbol"] == "SLC22A1")
# Plot Top2b expression versus genotype
boxplot(exprs(gse)[SLC, ] ~ pData(gse)[, "source_name_ch1"],
main = f[SLC, ])
# Plot Top2b expression versus genotype
boxplot(exprs(gse)[SLC, ] ~ pData(gse)[, "source_name_ch1"],
main = fDATA(gse)[SLC, ])
# Plot Top2b expression versus genotype
boxplot(exprs(gse)[SLC, ] ~ pData(gse)[, "source_name_ch1"],
main = fData(gse)[SLC, ])
# Find the row which contains Top2b expression data
SLC <- which(fData(gse)[, "Symbol"] == "SLC22A4")
# Find the row which contains Top2b expression data
SLC <- which(fData(gse)[, "Symbol"] == "SLC22A5")
# Plot Top2b expression versus genotype
boxplot(exprs(gse)[SLC, ] ~ pData(gse)[, "source_name_ch1"],
main = fData(gse)[SLC, ])
# Plot Top2b expression versus genotype
boxplot(exprs(gse)[SLC, ] ~ pData(gse)[, "source_name_ch1"],
main = f[SLC, ])
# Plot Top2b expression versus genotype
boxplot(x[SLC, ] ~ pData(gse)[, "source_name_ch1"],
main = f[SLC, ])
# Plot Top2b expression versus genotype
boxplot(x[SLC, ] ~ p[, "source_name_ch1"],
main = f[SLC, ])
# Find the row which contains Top2b expression data
SLC <- which(f[, "Symbol"] == "SLC22A5")
# Plot Top2b expression versus genotype
boxplot(x[SLC, ] ~ p[, "source_name_ch1"],
main = f[SLC, ])
View(f)
View(anno)
# Find the row which contains SLC22A5 expression data
SLC <- which(anno[, "Symbol"] == "SLC22A5")
# Plot SLC22A5 expression versus genotype
boxplot(x[SLC, ] ~ p[, "source_name_ch1"],
main = f[SLC, ])
# Plot SLC22A5 expression versus genotype
boxplot(x[SLC, ] ~ p[, "source_name_ch1"],
main = anno[SLC, ])
# Find the row which contains SLC22A5 expression data
SLC <- which(anno[, "Symbol"] == "SLC22A1")
# Plot SLC22A5 expression versus genotype
boxplot(x[SLC, ] ~ p[, "source_name_ch1"],
main = anno[SLC, ])
# Find the row which contains SLC22A5 expression data
SLC <- which(f[, "Symbol"] == "SLC22A1")
# Find the row which contains SLC22A5 expression data
SLC <- which(f[, "Symbol"] == "SLC22A4")
# Find the row which contains SLC22A5 expression data
SLC <- which(f[, "Symbol"] == "SLC")
# Find the row which contains SLC22A5 expression data
SLC <- which(f[, "Symbol"] == "SLCA5")
# Plot SLC22A5 expression versus genotype
boxplot(x[SLC, ] ~ p[, "source_name_ch1"],
main = anno[SLC, ])
# Find the row which contains SLC22A5 expression data
SLC <- which(f[, "Symbol"] == "SLCA5")
# Plot SLC22A5 expression versus genotype
boxplot(x[SLC, ] ~ p[, "source_name_ch1"],
main = anno[SLC, ])
# Find the row which contains SLC22A5 expression data
SLC <- which(f[, "Symbol"] == "SLC22A5")
# Plot SLC22A5 expression versus genotype
boxplot(x[SLC, ] ~ p[, "source_name_ch1"],
main = anno[SLC, ])
View(lcpm)
View(tfit)
View(x)
glMDPlot(tfit, coef=1, status=dt, main=colnames(x)[1],
side.main="Entrez_Gene_ID", counts=lcpm, groups=group, launch=TRUE)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="Entrez_Gene_ID", counts=x, groups=group, launch=TRUE)
clearCache()
cpm <- cpm(x)
setwd("~/Documents/Github/Analysing data from GEO")
source('~/Documents/Github/Analysing data from GEO/Analysing data from GEO222.R', echo=TRUE)
d <-glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="Entrez_Gene_ID", counts=x, groups=group, launch=TRUE)
d
brew install pandoc
htmlwidgets::saveWidget(as_widget(d), "test.html")
library(plotly)
htmlwidgets::saveWidget(as_widget(d), "test.html")
htmlwidgets::saveWidget(as_widget(d), "test.html")
